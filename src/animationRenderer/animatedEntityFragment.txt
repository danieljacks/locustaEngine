#version 150

in vec2 pass_textureCoords;
in vec3 pass_normal;
in float visibility;
in vec3 toLightVector[25];
in vec3 toCameraVector;

out vec4 out_colour;
out vec4 out_brightColor;

uniform sampler2D diffuseMap;
uniform vec3 skyColour;
uniform vec3 lightColor[25];
uniform vec3 lightAttenuation[25];
uniform int lightsCount;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambientLight;

void main(void){
	vec3 unitNormal = normalize(pass_normal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0;i<lightsCount;i++){
		float distance = length(toLightVector[i]);
		float attFactor = lightAttenuation[i].x + (lightAttenuation[i].y * distance) + (lightAttenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse, clamp(ambientLight, 0.0, 1.0));
	vec4 diffuseColour = texture(diffuseMap, pass_textureCoords);
	if(diffuseColour.a<0.5){
		discard;
	}
	
		
	
	out_colour =  vec4(totalDiffuse,1.0) * diffuseColour + vec4(totalSpecular,1.0);
	out_colour = mix(vec4(skyColour,1.0),out_colour, visibility);
	
}